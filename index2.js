(hex => {
  const types = { 
    end: 0, 
    byte: 1, short: 2, int: 3, long: 4, 
    float: 5, double: 6, 
    byteArray: 7, string: 8, list: 9, 
    compound: 10, 
    intArray: 11, longArray: 12 
  }
    
  let globalLog = false  
  
  const sanitizedHex = [...hex.replaceAll(/[^0-9a-f]/g, "")].reduce((a,v,i,o)=>{if (i % 4 === 0) {a.push(o[i+2] + o[i+3]);a.push(o[i] + o[i+1]);};return a},[])
  console.log(sanitizedHex)
  class NbtReader {
    constructor(hex) {
      this.payload = hex
      this.readHex = []
      this.value = undefined
    }
    
    nextByte() {
      const byte = this.payload.shift()
      this.readHex.push(byte)
      return byte
    }
    
    nextNumByte(size = 1, signed = true) {
      let merged = ""
      let signedLimit = 2**(size * 8 - 1)
      while (size--) {
        merged += this.nextByte()
      }
      let value = Number.parseInt(merged, 16)
      if (globalLog) console.log(value)
      if (signed && value >= signedLimit) {
        value -= signedLimit * 2
      }
      return value
    }
    
    nextCharByte(size = 1) {
      let list = []
      while (size--) {
        list.push(this.nextNumByte())
      }
      return String.fromCharCode(...list)
    }
    
    readData(type) {
      if (type === types.end) {
          throw "end"
      } else if (type === types.byte) {
          return this.nextNumByte(1)
      } else if (type === types.short) {
          return this.nextNumByte(2)
      } else if (type === types.int) {
          return this.nextNumByte(4)
      } else if (type === types.long) {
          return this.nextNumByte(8)
      } else if (type === types.float) {
          throw "WIP float"
      } else if (type === types.double) {
          throw "WIP double"
      } else if (type === types.byteArray) {
          throw "WIP byteArray"
      } else if (type === types.string) {
          return this.readString()
      } else if (type === types.list) {
          return this.readList()
      } else if (type === types.compound) {
          return this.readCompound()
      } else if (type === types.intArray) {
          return this.readIntArray()
      } else if (type === types.longArray) {
          return this.readLongArray()
      } else {
          throw "unknow type " + type
      }
    }
    
    readString() {
      let size = this.readData(types.short)
      return this.nextCharByte(size)
    }
    
    readList() {
      const list = []
      
      const type = this.readData(types.byte)
      let size = this.readData(types.int)
      while (size--) {
        list.push(this.readData(type))
      }
      
      return list
    }
    
    readCompound() {
      const obj = {}
      let subValueType = this.readData(types.byte)
      while (subValueType !== types.end) {
        const subValueName = this.readData(types.string)
        const subValue = this.readData(subValueType)
         
        obj[subValueName] = subValue
        
        subValueType = this.readData(types.byte)
      }
      return obj
    }
    
    readIntArray() {
      const array = []
      let size = this.readData(types.int)
      while (size--) {
        array.push(this.readData(types.int))
      }
      return array
    }
    
    readLongArray() {
      const array = []
      let size = this.readData(types.int)
      while (size--) {
        array.push(this.readData(types.long))
      }
      return array
    }
    
    readAll() {
      this.nextNumByte()
      this.nextByte()
      this.nextByte()
      this.value = this.readData(types.compound)
    }
  }
  
  const reader = new NbtReader(sanitizedHex)
  reader.readAll()
  console.log(reader.value, reader.readHex, reader.payload)
  
  })(`000a 0200 0600 6973 657a 7a5f 0600 0009 720d 7165 6975 6572 5f64 6f6d 7364 0008 0000 0001 6d0c 6e69 6365 6c6f 6e6f 6569 0973 0800 6e65 6974 6974 7365 0000 0000 0200 0600 6973 657a 795f 0500 000b 6206 6f6c 6b63 0073 0000 0087 0001 0002 0002 0002 0001 0002 0002 0002 0001 0002 0002 0002 0002 0002 0002 0002 0002 0002 0002 0002 0002 0002 0002 0002 0002 0002 0002 0002 0002 0002 0002 0002 0002 0002 0002 0002 0002 0002 0002 0002 0002 0002 0002 0002 0002 0001 0002 0002 0002 0001 0002 0002 0002 0001 0003 0002 0002 0002 0003 0002 0004 0002 0003 0002 0006 0000 0000 0000 0000 0000 0000 0002 0002 0000 0000 0000 0000 0000 0000 0000 0002 0002 0006 0000 0000 0000 0000 0000 0000 0002 0002 0000 0000 0000 0008 0000 0000 0000 0002 0003 0002 0002 0002 0003 0002 0002 0002 0003 0003 0002 0002 0002 0003 0002 0005 0002 0003 0002 0000 0000 0000 0007 0000 0000 0000 0002 0002 0000 0000 0000 0000 0000 0000 0000 0002 0002 0000 0000 0000 0000 0000 0000 0000 0002 0002 0000 0000 0000 0000 0000 0000 0000 0002 0003 0002 0002 0002 0003 0002 0002 0002 0003 0003 0002 0002 0002 0003 0002 0002 0002 0003 0002 0000 0000 0000 0000 0000 0000 0000 0002 0002 0000 0000 0000 0000 0000 0000 0000 0002 0002 0000 0000 0000 0000 0000 0000 0000 0002 0002 0000 0000 0000 0000 0000 0000 0000 0002 0003 0002 0002 0002 0003 0002 0002 0002 0003 0003 0002 0002 0002 0003 0002 0002 0002 0003 0002 0000 0000 0000 0000 0000 0000 0000 0002 0002 0000 0000 0000 0000 0000 0000 0000 0002 0002 0000 0000 0000 0000 0000 0000 0000 0002 0002 0000 0000 0000 0000 0000 0000 0000 0002 0003 0002 0002 0002 0003 0002 0002 0002 0203 0600 6973 657a 785f 0900 0009 740d 6c69 5f65 6e65 6974 6974 7365 000a 0000 0303 0700 6174 5367 7a49 0065 0000 0a00 0b00 6572 4e6c 6965 6867 6f62 0372 0100 0078 0000 0300 0100 0079 0000 0300 0100 ff7a ffff 00ff 0008 4904 6574 006d 0a00 0900 6f46 6772 4465 7461 0a61 0a00 7053 6e6f 6567 6144 6174 0000 0001 690b 576e 7261 6865 756f 6573 0a00 0300 6f70 0373 0100 0078 0000 0300 0100 0079 0000 0300 0100 007a 0000 0000 0002 7801 0100 0002 7901 0100 0002 7a01 0100 0001 6d04 6961 016e 0008 6902 0064 6d11 6e69 6365 6c6f 6e6f 6569 3a73 6172 6b63 0009 6909 766e 6e65 6f74 7972 000a 0000 011b 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0000 0003 7407 6761 4953 657a 0000 0000 0008 4904 6574 006d 0a00 0900 6f46 6772 4465 7461 0a61 0a00 7053 6e6f 6567 6144 6174 0000 0001 690b 576e 7261 6865 756f 6573 0a00 0300 6f70 0373 0100 0078 0000 0300 0100 0079 0000 0300 0100 007a 0000 0000 0002 7801 0100 0002 7901 0100 0002 7a01 0300 0001 6d04 6961 006e 0008 6902 0064 6d11 6e69 6365 6c6f 6e6f 6569 3a73 6172 6b63 0009 6909 766e 6e65 6f74 7972 000a 0000 011b 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0000 0001 6d06 7269 6f72 0072 0001 690b 576e 7261 6865 756f 6573 0300 0600 6f63 6f6c 796e 0000 0100 0001 6d04 6961 006e 0009 6909 766e 6e65 6f74 7972 000a 0000 011b 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0100 0500 6d65 7470 0179 0800 0400 7974 6570 0a00 696d 656e 7263 6661 3a74 0003 7407 6761 4953 657a 0000 0000 0008 4904 6574 006d 0a00 1500 6c62 6575 7270 6e69 4474 7461 5061 6f72 6976 6564 0a72 0700 6f63 6e72 7265 0331 0100 ff78 ffff 03fc 0100 ff79 ffff 03ff 0100 ff7a ffff 00fc 000a 6307 726f 656e 3272 0003 7801 0000 0400 0003 7901 0000 0300 0003 7a01 0000 0100 0800 0d00 6373 6568 616d 6974 4e63 6d61 0065 640c 6c65 7669 7265 6d79 6e61 0931 0900 6f70 5473 6761 614d 0070 0000 0000 0a00 0300 6f70 0373 0100 ff78 feff 0302 0100 0079 0000 032c 0100 ff7a ffff 00cc 0002 7801 0400 0002 7901 0100 0002 7a01 0400 0008 7305 7974 656c 0000 0008 6902 0064 6d1b 6e69 6365 6c6f 6e6f 6569 3a73 6f63 6f6c 796e 7562 6c69 6964 676e 0800 0400 616e 656d 0c00 6564 696c 6576 7972 616d 316e 0009 7007 6c61 7465 6574 000a 0000 0809 0400 614e 656d 0d00 696d 656e 7263 6661 3a74 6961 0072 0008 4e04 6d61 0065 6d15 6e69 6365 6172 7466 633a 626f 6c62 7365 6f74 656e 0800 0400 614e 656d 1400 696d 656e 7263 6661 3a74 616f 5f6b 6c70 6e61 736b 0a00 0a00 7250 706f 7265 6974 7365 0008 6104 6978 0073 7901 0800 0400 614e 656d 1100 696d 656e 7263 6661 3a74 616f 5f6b 6f6c 0067 000a 500a 6f72 6570 7472 6569 0873 0500 6968 676e 0065 7205 6769 7468 0008 6804 6c61 0066 6c05 776f 7265 0008 7007 776f 7265 6465 0500 6166 736c 0865 0600 6166 6963 676e 0500 6f6e 7472 0868 0400 706f 6e65 0500 6166 736c 0065 0008 4e04 6d61 0065 6d12 6e69 6365 6172 7466 6f3a 6b61 645f 6f6f 0072 000a 500a 6f72 6570 7472 6569 0873 0500 6968 676e 0065 7205 6769 7468 0008 6804 6c61 0066 7505 7070 7265 0008 7007 776f 7265 6465 0500 6166 736c 0865 0600 6166 6963 676e 0500 6f6e 7472 0868 0400 706f 6e65 0500 6166 736c 0065 0008 4e04 6d61 0065 6d12 6e69 6365 6172 7466 6f3a 6b61 645f 6f6f 0072 000a 500a 6f72 6570 7472 6569 0873 0700 6176 6972 6e61 0074 6214 6f6c 6b63 6172 6b63 6d65 7470 7379 6e69 6c67 0865 0600 6166 6963 676e 0400 6165 7473 0800 0400 614e 656d 2200 696d 656e 6f63 6f6c 696e 7365 623a 6f6c 6b63 696d 656e 6f63 6f6c 696e 7365 6172 6b63 0a00 0a00 7250 706f 7265 6974 7365 0008 6606 6361 6e69 0067 7305 756f 6874 0800 0400 614e 656d 1400 696d 656e 7263 6661 3a74 6177 6c6c 745f 726f 6863 0a00 0a00 7250 706f 7265 6974 7365 0008 6606 6361 6e69 0067 6504 7361 0074 0008 4e04 6d61 0065 6d20 6e69 6365 6c6f 6e6f 6569 3a73 6c62 636f 686b 7475 6564 696c 6576 7972 616d 006e 0001 7607 7265 6973 6e6f 0301 0900 636d 6576 7372 6f69 006e 0a00 0aaa 0d00 706f 6974 6e6f 6c61 645f 7461 0a61 0b00 7473 7572 7463 7275 7a69 0a65 0e00 7270 6d69 7261 5f79 666f 7366 7465 0003 7801 0000 0400 0003 7901 0000 0100 0003 7a01 0000 0400 0000 0000
  `)